// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	dtos "github.com/edgexfoundry/app-record-replay/pkg/dtos"

	mock "github.com/stretchr/testify/mock"
)

// DataManager is an autogenerated mock type for the DataManager type
type DataManager struct {
	mock.Mock
}

// CancelRecording provides a mock function with given fields:
func (_m *DataManager) CancelRecording() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CancelReplay provides a mock function with given fields:
func (_m *DataManager) CancelReplay() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExportRecordedData provides a mock function with given fields:
func (_m *DataManager) ExportRecordedData() (*dtos.RecordedData, error) {
	ret := _m.Called()

	var r0 *dtos.RecordedData
	var r1 error
	if rf, ok := ret.Get(0).(func() (*dtos.RecordedData, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *dtos.RecordedData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.RecordedData)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportRecordedData provides a mock function with given fields: data
func (_m *DataManager) ImportRecordedData(data *dtos.RecordedData) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dtos.RecordedData) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecordingStatus provides a mock function with given fields:
func (_m *DataManager) RecordingStatus() dtos.RecordStatus {
	ret := _m.Called()

	var r0 dtos.RecordStatus
	if rf, ok := ret.Get(0).(func() dtos.RecordStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dtos.RecordStatus)
	}

	return r0
}

// ReplayStatus provides a mock function with given fields:
func (_m *DataManager) ReplayStatus() dtos.ReplayStatus {
	ret := _m.Called()

	var r0 dtos.ReplayStatus
	if rf, ok := ret.Get(0).(func() dtos.ReplayStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dtos.ReplayStatus)
	}

	return r0
}

// StartRecording provides a mock function with given fields: request
func (_m *DataManager) StartRecording(request dtos.RecordRequest) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(dtos.RecordRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartReplay provides a mock function with given fields: request
func (_m *DataManager) StartReplay(request dtos.ReplayRequest) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(dtos.ReplayRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDataManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewDataManager creates a new instance of DataManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDataManager(t mockConstructorTestingTNewDataManager) *DataManager {
	mock := &DataManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
